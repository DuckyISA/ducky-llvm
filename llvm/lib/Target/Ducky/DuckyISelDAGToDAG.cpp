//===-- DuckyISelDAGToDAG.cpp - A dag to dag inst selector for Ducky ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Ducky target.
//
//===----------------------------------------------------------------------===//

#include "Ducky.h"
#include "DuckyTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "DuckyInstrInfo.h"

#define DEBUG_TYPE "ducky"

using namespace llvm;

/// DuckyDAGToDAGISel - Ducky specific code to select Ducky machine
/// instructions for SelectionDAG operations.
///
namespace {
class DuckyDAGToDAGISel : public SelectionDAGISel {
  const DuckySubtarget &Subtarget;

public:
  explicit DuckyDAGToDAGISel(DuckyTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  void Select(SDNode *N) override;

  bool SelectMEMBo(SDValue Addr, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "Ducky DAG->DAG Pattern Instruction Selection";
  }

  inline SDValue getI32Imm(unsigned Imm, const SDLoc &dl) {
    LLVM_DEBUG(dbgs() << "getI32Imm: Imm=" << Imm << '\n');
    return CurDAG->getTargetConstant(Imm, dl, MVT::i32);
  }

private:
  void SelectFrameIndex(SDNode *N);

// Include the pieces autogenerated from the target description.
#include "DuckyGenDAGISel.inc"
};
} // end anonymous namespace

bool DuckyDAGToDAGISel::SelectMEMBo(SDValue Addr, SDValue &Base, SDValue &Offset) {
  //LLVM_DEBUG(dbgs() << "SelectMEMbo:\n  Addr="; Addr.dump(CurDAG));

  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    LLVM_DEBUG(dbgs() << "SelectMEMbo:  Frame Index\n");

    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    //LLVM_DEBUG(dbgs() << "SelectMEMbo:\n  Base="; Base.dump(); dbgs() << "  Offset="; Offset.dump());

    return true;
  }

  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    LLVM_DEBUG(dbgs() << "SelectMEMbo:  direct calls\n");
    return false; // direct calls.
  }

  LLVM_DEBUG(dbgs() << "SelectMEMbo:  replacing...\n");
  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  //LLVM_DEBUG(dbgs() << "SelectMEMbo:\n  Base="; Base.dump(); dbgs() << "  Offset="; Offset.dump());

  return true;
}

void DuckyDAGToDAGISel::SelectFrameIndex(SDNode *N)
{
  assert(N->getValueType(0) == MVT::i32);

  SDLoc dl(N);
  int FI = cast<FrameIndexSDNode>(N)->getIndex();
  SDValue TFI = CurDAG->getTargetFrameIndex(FI, MVT::i32);

  if (N->hasOneUse()) {
    CurDAG->SelectNodeTo(N, Ducky::ADDri, MVT::i32, TFI, CurDAG->getTargetConstant(0, dl, MVT::i32));
    return;
  }

  ReplaceNode(N, CurDAG->getMachineNode(Ducky::ADDri, dl, MVT::i32, TFI, CurDAG->getTargetConstant(0, dl, MVT::i32)));
}

void DuckyDAGToDAGISel::Select(SDNode *N) {
  LLVM_DEBUG(dbgs() << "DuckyDAGToDAGISel::Select: DAG="; N->dump(CurDAG); dbgs() << '\n');

  // Isn't it already selected?
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "  ";  N->dump(CurDAG); dbgs() << '\n');
    N->setNodeId(-1);
    return;
  }

  switch(N->getOpcode()) {
    default:
      break;

    case ISD::FrameIndex:
      SelectFrameIndex(N);
      return;
  }

  SelectCode(N);
}

FunctionPass *llvm::createDuckyISelDag(DuckyTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new DuckyDAGToDAGISel(TM, OptLevel);
}
